#version 420 core

uniform sampler2D uTexInput; // texture we re blurring
uniform sampler2D uTexVelocity; // velocity buffer

uniform float uVelocityScale;

uniform int MAX_SAMPLES;

out vec4 oResult; // for first color attachment in my framebuffer

void main(void)
{
	vec2 texelSize = 1.0 / vec2(textureSize(uTexInput, 0));
	vec2 screenTexCoords = gl_FragCoord.xy * texelSize;

	vec2 velocity = texture(uTexVelocity, screenTexCoords).rg;
    velocity *= uVelocityScale;

	// blur code will go here

	// high target framerate (high shutter speed) will result in less blur, 
	// a low target framerate (low shutter speed) will result in more blur, much like a real camera.
	//uVelocityScale = currentFPS / targetFPS; // in cpp

	// how many samples going to take for the blur
	float speed = length(velocity / texelSize);
	float nSamples = clamp (int (speed), 1, MAX_SAMPLES);

	// actual blur
	oResult = texture(uTexInput, screenTexCoords);

	velocity = normalize(velocity) * texelSize;
	float hlim = float(-nSamples) * 0.5 + 0.5;
	for (int i = 1; i < nSamples; ++i) 
	{
      vec2 offset = velocity * (hlim + float(i));
      oResult += texture(uTexInput, screenTexCoords + offset);
	}


   oResult /= float(nSamples);
   oResult.a = 1.0;
}
