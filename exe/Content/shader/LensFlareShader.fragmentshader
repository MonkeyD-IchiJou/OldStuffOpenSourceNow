#version 420 core

uniform sampler2D uInputTex; // the brightness
uniform sampler2D uLensColor; // the lensflare color

uniform int uGhosts; // number of ghost samples
uniform float uGhostDispersal;	// dispersion factor

uniform float uHaloWidth;
uniform float uDistortion;

noperspective in vec2 vTexcoord;

out vec4 fResult; // go to lensflare texture


vec3 textureDistorted(
      in sampler2D tex,
      in vec2 texcoord,
      in vec2 direction, // direction of distortion
      in vec3 distortion // per-channel distortion factor
   ) 
   {
      return vec3(
         texture(tex, texcoord + direction * distortion.r).r,
         texture(tex, texcoord + direction * distortion.g).g,
         texture(tex, texcoord + direction * distortion.b).b
      );
   }

void main()
{

	vec2 texcoord = -vTexcoord + vec2(1.0);
	vec2 texelSize = 1.0 / vec2(textureSize(uInputTex, 0));

	vec3 distortion = vec3(-texelSize.x * uDistortion, 0.0, texelSize.x * uDistortion);

	// ghost vector to image centre:
    vec2 ghostVec = (vec2(0.5) - texcoord) * uGhostDispersal;

	// sample ghosts:  
    vec4 result = vec4(0.0);
    for (int i = 0; i < uGhosts; ++i) 
	{ 
        vec2 offset = fract(texcoord + ghostVec * float(i));

		float weight = length(vec2(0.5) - offset) / length(vec2(0.5));
		weight = pow(1.0 - weight, 10.0);

        result += vec4(textureDistorted(
			uInputTex,
			offset,
			normalize(ghostVec),
			distortion
		) * weight, 0.0);
    }
 
	result *= texture(uLensColor, vec2(length(vec2(0.5) - texcoord) / length(vec2(0.5))) );

	 // sample halo:
	vec2 haloVec = normalize(ghostVec) * uHaloWidth;
	float weight = length(vec2(0.5) - fract(texcoord + haloVec)) / length(vec2(0.5));
	weight = pow(1.0 - weight, 50.0);
	result += vec4(textureDistorted(
		uInputTex,
		fract(texcoord + haloVec),
		normalize(ghostVec),
		distortion
	) * weight, 0.0);


    fResult = result;
   
}